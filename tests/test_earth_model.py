"""File containing tests of pyrex earth_model module"""

import pytest

from pyrex.earth_model import PREM, CoreMantleCrustModel

import numpy as np


# Data from http://ds.iris.edu/ds/products/emc-prem/
# Removed repeated data points at boundaries
prem_data = [
    (0.0e3, 13.08850),    (100.0e3, 13.08632),  (200.0e3, 13.07979),
    (300.0e3, 13.06890),  (400.0e3, 13.05366),  (500.0e3, 13.03406),
    (600.0e3, 13.01011),  (700.0e3, 12.98181),  (800.0e3, 12.94914),
    (900.0e3, 12.91213),  (1000.0e3, 12.87076), (1100.0e3, 12.82503),
    (1200.0e3, 12.77495), (1217.1e3, 12.76595),  # (1221.5e3, 12.76361),
    (1221.5e3, 12.16633), (1300.0e3, 12.12499), (1400.0e3, 12.06923),
    (1500.0e3, 12.00988), (1600.0e3, 11.94681), (1700.0e3, 11.87989),
    (1800.0e3, 11.80900), (1900.0e3, 11.73401), (2000.0e3, 11.65478),
    (2100.0e3, 11.57119), (2200.0e3, 11.48311), (2221.5e3, 11.46358),
    (2300.0e3, 11.39042), (2400.0e3, 11.29298), (2500.0e3, 11.19067),
    (2600.0e3, 11.08336), (2700.0e3, 10.97092), (2800.0e3, 10.85322),
    (2900.0e3, 10.73013), (3000.0e3, 10.60153), (3100.0e3, 10.46729),
    (3200.0e3, 10.32727), (3300.0e3, 10.18136), (3400.0e3, 10.02942),
    # (3480.0e3, 9.90344),
    (3480.0e3, 5.56646),  (3485.7e3, 5.56360),  (3535.7e3, 5.53856),
    (3585.7e3, 5.51358),  (3630.0e3, 5.49148),  (3630.0e3, 5.49148),
    (3635.7e3, 5.48863),  (3685.7e3, 5.46372),  (3735.7e3, 5.43883),
    (3785.7e3, 5.41395),  (3835.7e3, 5.38908),  (3885.7e3, 5.36420),
    (3935.7e3, 5.33931),  (3985.7e3, 5.31440),  (4035.7e3, 5.28945),
    (4085.7e3, 5.26447),  (4135.7e3, 5.23944),  (4185.7e3, 5.21434),
    (4235.7e3, 5.18919),  (4285.7e3, 5.16395),  (4335.7e3, 5.13863),
    (4385.7e3, 5.11322),  (4435.7e3, 5.08770),  (4485.7e3, 5.06208),
    (4535.7e3, 5.03633),  (4585.7e3, 5.01045),  (4635.7e3, 4.98443),
    (4685.7e3, 4.95827),  (4735.7e3, 4.93195),  (4785.7e3, 4.90547),
    (4835.7e3, 4.87881),  (4885.7e3, 4.85196),  (4935.7e3, 4.82493),
    (4985.7e3, 4.79770),  (5035.7e3, 4.77025),  (5085.7e3, 4.74259),
    (5135.7e3, 4.71469),  (5185.7e3, 4.68656),  (5235.7e3, 4.65819),
    (5285.7e3, 4.62956),  (5335.7e3, 4.60067),  (5385.7e3, 4.57150),
    (5435.7e3, 4.54206),  (5485.7e3, 4.51232),  (5535.7e3, 4.48228),
    (5585.7e3, 4.45194),  (5600.0e3, 4.44320),  (5600.0e3, 4.44320),
    (5635.7e3, 4.42128),  (5685.7e3, 4.39029),  # (5701.0e3, 4.38074),
    (5701.0e3, 3.99212),  (5711.0e3, 3.98979),  (5721.0e3, 3.98746),
    (5731.0e3, 3.98514),  (5741.0e3, 3.98281),  (5751.0e3, 3.98048),
    (5761.0e3, 3.97815),  (5771.0e3, 3.97582),  (5771.0e3, 3.97582),
    (5781.0e3, 3.96322),  (5791.0e3, 3.95061),  (5801.0e3, 3.93801),
    (5811.0e3, 3.92541),  (5821.0e3, 3.91280),  (5831.0e3, 3.90020),
    (5841.0e3, 3.88759),  (5851.0e3, 3.87499),  (5861.0e3, 3.86239),
    (5871.0e3, 3.84978),  (5881.0e3, 3.83718),  (5891.0e3, 3.82458),
    (5901.0e3, 3.81197),  (5911.0e3, 3.79937),  (5921.0e3, 3.78677),
    (5931.0e3, 3.77416),  (5941.0e3, 3.76156),  (5951.0e3, 3.74895),
    (5961.0e3, 3.73635),  # (5971.0e3, 3.72375),
    (5971.0e3, 3.54326),  (5981.0e3, 3.53729),  (5991.0e3, 3.53132),
    (6001.0e3, 3.52535),  (6011.0e3, 3.51938),  (6021.0e3, 3.51341),
    (6031.0e3, 3.50743),  (6041.0e3, 3.50146),  (6051.0e3, 3.49549),
    (6061.0e3, 3.48952),  (6071.0e3, 3.48355),  (6081.0e3, 3.47758),
    (6091.0e3, 3.47160),  (6101.0e3, 3.46563),  (6111.0e3, 3.45966),
    (6121.0e3, 3.45369),  (6131.0e3, 3.44772),  (6141.0e3, 3.44175),
    # (6151.0e3, 3.43577),
    (6151.0e3, 3.35949),  (6161.0e3, 3.36058),  (6171.0e3, 3.36166),
    (6181.0e3, 3.36275),  (6191.0e3, 3.36384),  (6201.0e3, 3.36492),
    (6211.0e3, 3.36601),  (6221.0e3, 3.36710),  (6231.0e3, 3.36818),
    (6241.0e3, 3.36927),  (6251.0e3, 3.37036),  (6261.0e3, 3.37145),
    (6271.0e3, 3.37253),  (6281.0e3, 3.37362),  (6291.0e3, 3.37471),
    (6291.0e3, 3.37471),  (6301.0e3, 3.37579),  (6311.0e3, 3.37688),
    (6321.0e3, 3.37797),  (6326.0e3, 3.37851),  (6331.0e3, 3.37905),
    (6336.0e3, 3.37960),  (6337.0e3, 3.37970),  (6338.0e3, 3.37981),
    (6339.0e3, 3.37992),  (6340.0e3, 3.38003),  (6341.0e3, 3.38014),
    (6342.0e3, 3.38025),  (6343.0e3, 3.38036),  (6344.0e3, 3.38047),
    (6345.0e3, 3.38057),  (6346.0e3, 3.38068),
    # (6346.6e3, 3.38075),
    (6346.6e3, 2.90000),  (6348.0e3, 2.90000),  (6349.0e3, 2.90000),
    (6350.0e3, 2.90000),  (6351.0e3, 2.90000),  (6352.0e3, 2.90000),
    (6353.0e3, 2.90000),  (6354.0e3, 2.90000),  (6355.0e3, 2.90000),
    # (6356.0e3, 2.90000),
    (6356.0e3, 2.60000),  (6357.0e3, 2.60000),  (6358.0e3, 2.60000),
    (6359.0e3, 2.60000),  (6360.0e3, 2.60000),  (6361.0e3, 2.60000),
    (6362.0e3, 2.60000),  (6363.0e3, 2.60000),  (6364.0e3, 2.60000),
    (6365.0e3, 2.60000),  (6366.0e3, 2.60000),  (6367.0e3, 2.60000),
    # (6368.0e3, 2.60000),
    (6368.0e3, 1.02000),  (6369.0e3, 1.02000),  (6370.0e3, 1.02000),
    # (6371.0e3, 1.02000)
]


class TestPREM:
    """Tests for PREM earth model class"""
    @pytest.mark.parametrize("radius, density", prem_data)
    def test_density(self, radius, density):
        """Test that density function matches PREM data"""
        earth = PREM()
        assert earth.density(radius) == pytest.approx(density, rel=1e-5)

    def test_density_multiple(self):
        """Test density function for multiple values at once"""
        earth = PREM()
        radii = np.linspace(0, 6500e3, 6501)
        expected = [earth.density(r) for r in radii]
        assert np.array_equal(earth.density(radii), expected)

    # TODO: Add tests for slant depth



class TestCoreMantleCrustModel:
    """Tests for CoreMantleCrustModel class"""
    def test_density(self):
        """Test that density function matches expected values"""
        earth = CoreMantleCrustModel()
        assert earth.density(0) == 14
        assert earth.density(1e6) == 14
        assert earth.density(3.464e6) == 14
        assert earth.density(3.5e6) == 3.4
        assert earth.density(5e6) == 3.4
        assert earth.density(6.338e6) == 3.4
        assert earth.density(6.378e6) == 2.9

    def test_density_multiple(self):
        """Test density function for multiple values at once"""
        earth = CoreMantleCrustModel()
        radii = np.linspace(0, 6500e3, 6501)
        expected = [earth.density(r) for r in radii]
        assert np.array_equal(earth.density(radii), expected)
